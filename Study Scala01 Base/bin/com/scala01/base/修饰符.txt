/*
 * Scala 访问修饰符基本和Java的一样,分别有：private，protected，public。
 * 如果没有指定访问修饰符符，默认情况下,Scala对象的访问级别都是 public。
 * Scala 中的 private 限定符,比 Java 更严格,在嵌套类情况下,
 * 外层类甚至不能访问被嵌套类的私有成员。
 */
//private
class Outer{
    class Inner{
        private def f(){println("f")}
        class InnerMost{
          f() // 正确
        }
    }
    //(new Inner).f() //错误
}

//protected 
/*在 scala 中，对保护（Protected）成员的访问比 java 更严格一些。
 * 因为它只允许保护成员在定义了该成员的的类的子类中被访问。
 * 而在java中，用protected关键字修饰的成员，除了定义了该成员的类的子类可以访问,
 * 同一个包里的其他类也可以进行访问。
 */
class Super{
   protected def f() {println("f")}
   
}
class Sub extends Super{
	 f()
}
class Other{
	//(new Super).f() //错误
}

//public 默认为public 
//Scala中，如果没有指定任何的修饰符，则默认为 public。这样的成员在任何地方都可以被访问。
class Outer2 {
   class Inner {
      def f() { println("f") }
      class InnerMost {
         f() // 正确
      }
   }
   (new Inner).f() // 正确因为 f() 是 public
}


*作用域保护
Scala中，访问修饰符可以通过使用限定词强调。格式为:
private[x] 或 protected[x]
这里的x指代某个所属的包、类或单例对象。
如果写成private[x],读作"这个成员除了对[…]中的类或[…]中的包中的类
及它们的伴生对像可见外，对其它所有类都是private。
这种技巧在横跨了若干包的大型项目中非常有用，它允许你定义一些在你项目的
若干子包中可见但对于项目外部的客户却始终不可见的东西
package bobsrocckets{
    package navigation{
        private[bobsrockets] class Navigator{
         protected[navigation] def useStarChart(){}
         class LegOfJourney{
             private[Navigator] val distance = 100
             }
            private[this] var speed = 200
            }
        }
        package launch{
        import navigation._
        object Vehicle{
        private[launch] val guide = new Navigator
        }
    }
}
上述例子中，类Navigator被标记为private[bobsrockets]
就是说这个类对包含在bobsrockets包里的所有的类和对象可见。
比如说，从Vehicle对象里对Navigator的访问是被允许的，
因为对象Vehicle包含在包launch中，而launch包在bobsrockets中，
相反，所有在包bobsrockets之外的代码都不能访问类Navigator。